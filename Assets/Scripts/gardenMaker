using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.iOS;

public class gardenMaker : MonoBehaviour {

	public GameObject ballPrefab;
	public float createHeight;
	public float maxRayDistance = 30.0f;
	public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
	private MaterialPropertyBlock props;
	private Vector3 placeLevel;
	public GameObject gardenController;

	// Use this for initialization
	void Start () {
		props = new MaterialPropertyBlock ();

	}

	public void CreateBall(Vector3 atPosition, GameObject dingdong)
	{
		GameObject ballGO = Instantiate (dingdong, atPosition, Quaternion.identity);
		if (dingdong == flower1) {

			ballGO.tag = "flower";
			ballGO.transform.RotateAround (ballGO.transform.position, new Vector3 (0, 1, 0), Random.Range (0, 360));
			//Debug.Log (atPosition.x + " " + atPosition.y + " " + atPosition.z);

		}

	}

	// Update is called once per frame
	void Update () {
		#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
		if (Input.GetMouseButtonDown (0)) 
		{
			Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
			RaycastHit hit;

			//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
			//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
			if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) 
			{
				CreateBall (new Vector3 (hit.point.x, hit.point.y + createHeight, hit.point.z));

				//we're going to get the position from the contact point
				Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", hit.point.x, hit.point.y, hit.point.z));
			}
		}
		#else
		if (Input.touchCount > 0 )
		{
			var touch = Input.GetTouch(0);
			if (touch.phase == TouchPhase.Began)
			{
				var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
				ARPoint point = new ARPoint {
					x = screenPosition.x,
					y = screenPosition.y
				};
						
				List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, 
					ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);
				if (hitResults.Count > 0) {
					foreach (var hitResult in hitResults) {
						Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
						//add createheight to the y below
						placeLevel = new Vector3 (position.x, createHeight, position.z);
						setLevel ();
						break;
					}
				}

			}
		}
		#endif

	}

	public void setLevel(){
		//
		currentLevel = keeper.Instance.currentGardenLevel;
		//alert.gameObject.SetActive (false);
		setLevels ();

	}

	void setLevels(){
		//destroy all islands, bees, flowers and reset which flowers are in the field, and which bees are in the stack

		DestroyGameObjectsWithTag ("beeParent");
		DestroyGameObjectsWithTag ("flower");
		beeStack.Clear ();

		//create flowers, bees and island
		//levelator (placeLevel, gardenController.GetComponent<gardenController>().gardenBees);
		placement(gardenController.GetComponent<gardenController>().gardenBees);


	}
	public void placement(int boop){

		createBeesCalled = true;
		totalBees = boop;

		hives = GameObject.FindGameObjectsWithTag ("flower");

		if (hives.Length == 0) {
			//float centerX = 0;
			//float centerZ = 0;
			//Debug.Log("are there hives?"+hives.Length);
		} else {
			centerX = hives [0].gameObject.transform.position.x;
			centerZ = hives [0].gameObject.transform.position.z;
			//Debug.Log("are there hives?"+hives.Length);
		}

		for (int i =0; i<boop; i++){
			//
			float posx = Random.Range (centerX-terrainWidth, centerX + terrainWidth);
			float posz = Random.Range (centerZ-terrainLength, centerZ + terrainLength);
			GameObject newObject = (GameObject)Instantiate (objectToPlace, new Vector3 (posx, .1f, posz), Quaternion.identity);

			GameObject parental = (GameObject)Instantiate (parentHolder,new Vector3 (posx, .1f, posz), Quaternion.identity);
			//Debug.Log("PUSH!");
			newObject.transform.SetParent(parental.transform);
			newObject.transform.RotateAround (newObject.transform.position, new Vector3 (0, 1, 0), Random.Range (0, 360));
			parental.tag = "beeParent";
			newObject.tag = "bee";
			beeStack.Push (newObject);

		}
		//mover.GetComponent<BallMover> ().flowers = new GameObject[0];
		//System.Array.Clear(mover.GetComponent<BallMover> ().flowers,0, mover.GetComponent<BallMover> ().flowers.Length);

		//Debug.Log("All bees created!");

	}


}
